on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: 'Environment for deployment'
      docker_image_tag:
        type: string
        required: true
        description: 'Image name and tag to be deployed to docker'
    secrets:
      DOTENV_KEY:
        required: false
        description: 'Secret for .env file'
      DOCKERHUB_USERNAME:
        required: true
        description: 'Username for Docker Hub'
      DOCKERHUB_TOKEN:
        required: true
        description: 'Token for Docker Hub authentication'
      SSH_HOST:
        required: true
        description: 'SSH host for deployment'
      SSH_KEY:
        required: true
        description: 'SSH private key for deployment'
      SSH_USER:
        required: true
        description: 'SSH username for deployment'
      SSH_PORT:
        required: true
        description: 'SSH port for deployment'

  workflow_dispatch:

jobs:
  lint:
    name: 🧑‍💻 Lint
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    timeout-minutes: 10
    steps:
      - name: ☁️ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔧 Install npm@latest
        run: npm i -g npm@latest

      - name: 📦 Install dependencies
        uses: bahmutov/npm-install@v1

      - name: 🔍 Lint Code Base
        run: npm run lint --if-present

  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    timeout-minutes: 10
    steps:
      - name: ☁️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📦 Install dependencies
        uses: bahmutov/npm-install@v1

      - name: 🔍 Run tests
        run: npm run test --if-present

  codeQL:
    name: 🔍 CodeQL
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    timeout-minutes: 10
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language:
          - javascript-typescript

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

  build-app:
    name: 🏗️ Build App
    environment: ${{inputs.environment}}
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: ☁️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📦 Install dependencies
        uses: bahmutov/npm-install@v1

      - name: 🔧 Remove dev dependencies
        run: npm prune --production

      - name: 🏗️ Build Application
        env:
          DOTENV_KEY: ${{ secrets.DOTENV_KEY }}
        run: npm run build

      - name: 📁 Archive build output
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist
          if-no-files-found: error

  docker-build-push:
    name: 📦 Docker Build/Push
    environment: ${{inputs.environment}}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: ☁️ Checkout Repository
        uses: actions/checkout@v4

      - name: 📁 Download build output
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build

      - name: 👓 Display structure of downloaded files
        run: ls -R build

      - name: 🦈 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🗝️ Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 📦 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ inputs.docker_image_tag }}
          platforms: linux/amd64,linux/arm64

  deploy:
    name: 📦 Deploy build
    environment: ${{inputs.environment}}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: ☁️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🗝️ Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🗝️ Configure ssh connection
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -t rsa ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_KEY }}"

      - name: 😎 Deploy to production server
        env:
          DOCKER_HOST: ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PORT }}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          docker compose -f docker-compose.prod.yml down -v || true \
          && docker compose -f docker-compose.prod.yml pull \
          && docker compose -f docker-compose.prod.yml up -d
